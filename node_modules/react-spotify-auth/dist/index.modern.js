import React, { Component, useEffect } from 'react';
import t from 'prop-types';

var scopes = {
  ugcImageUpload: 'ugc-image-upload',
  userFollowRead: 'user-follow-read',
  userFollowModify: 'user-follow-modify',
  userReadRecentlyPlayed: 'user-read-recently-played',
  userTopRead: 'user-top-read',
  userReadPlaybackPosition: 'user-read-playback-position',
  userLibraryRead: 'user-library-read',
  userLibraryModify: 'user-library-modify',
  userReadPlaybackState: 'user-read-playback-state',
  userReadCurrentlyPlaying: 'user-read-currently-playing',
  userModifyPlaybackState: 'user-modify-playback-state',
  playlistReadCollaborative: 'playlist-read-collaborative',
  playlistModifyPrivate: 'playlist-modify-private',
  playlistModifyPublic: 'playlist-modify-public',
  playlistReadPrivate: 'playlist-read-private',
  streaming: 'streaming',
  appRemoteControl: 'app-remote-control',
  userReadEmail: 'user-read-email',
  userReadPrivate: 'user-read-private'
};
var allScopes = function () {
  return Object.keys(scopes).reduce(function (sum, scope) {
    return sum.concat(scopes[scope], '%20');
  }, '').slice(0, -3);
}();

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;

  _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

var getRedirectUrl = function getRedirectUrl(clientID, scopes, redirectUri, showDialog) {
  return 'https://accounts.spotify.com/authorize?response_type=token' + ("&client_id=" + clientID) + ("&scope=" + scopes.join('%20')) + ("&redirect_uri=" + redirectUri) + '&show_dialog=' + Boolean(showDialog);
};

var styles = {"rsaSpotifyBtn":"_3xrlJ","rsaSpotifyLogo":"_1JCP_"};

var SpotifyLogo = function SpotifyLogo(props) {
  return /*#__PURE__*/React.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 496 512",
    className: props.className || styles.rsaSpotifyLogo
  }, /*#__PURE__*/React.createElement("path", {
    d: "M248 8C111.1 8 0 119.1 0 256s111.1 248 248 248 248-111.1 248-248S384.9 8 248 8zm100.7 364.9c-4.2 0-6.8-1.3-10.7-3.6-62.4-37.6-135-39.2-206.7-24.5-3.9 1-9 2.6-11.9 2.6-9.7 0-15.8-7.7-15.8-15.8 0-10.3 6.1-15.2 13.6-16.8 81.9-18.1 165.6-16.5 237 26.2 6.1 3.9 9.7 7.4 9.7 16.5s-7.1 15.4-15.2 15.4zm26.9-65.6c-5.2 0-8.7-2.3-12.3-4.2-62.5-37-155.7-51.9-238.6-29.4-4.8 1.3-7.4 2.6-11.9 2.6-10.7 0-19.4-8.7-19.4-19.4s5.2-17.8 15.5-20.7c27.8-7.8 56.2-13.6 97.8-13.6 64.9 0 127.6 16.1 177 45.5 8.1 4.8 11.3 11 11.3 19.7-.1 10.8-8.5 19.5-19.4 19.5zm31-76.2c-5.2 0-8.4-1.3-12.9-3.9-71.2-42.5-198.5-52.7-280.9-29.7-3.6 1-8.1 2.6-12.9 2.6-13.2 0-23.3-10.3-23.3-23.6 0-13.6 8.4-21.3 17.4-23.9 35.2-10.3 74.6-15.2 117.5-15.2 73 0 149.5 15.2 205.4 47.8 7.8 4.5 12.9 10.7 12.9 22.6 0 13.6-11 23.3-23.2 23.3z"
  }));
};

SpotifyLogo.propTypes = {
  className: t.string
};

var getHash = function getHash() {
  return window ? window.location.hash.substring(1).split('&').reduce(function (initial, item) {
    if (item) {
      var parts = item.split('=');
      initial[parts[0]] = decodeURIComponent(parts[1]);
    }

    return initial;
  }, {}) : '';
};

var SpotifyAuth = /*#__PURE__*/function (_Component) {
  _inheritsLoose(SpotifyAuth, _Component);

  function SpotifyAuth(props) {
    var _this;

    _this = _Component.call(this, props) || this;

    _this.handleClick = function (event) {
      event.preventDefault();
      var redirectUri = getRedirectUrl(_this.props.clientID, _this.props.scopes, _this.props.redirectUri, _this.props.showDialog);

      if (window.location !== window.parent.location) {
        var loginWindow = window.open(redirectUri);
        window.addEventListener('message', function (event) {
          if (event.data.type !== 'react-spotify-auth' || !event.data.accessToken) {
            return;
          }

          loginWindow.close();

          _this.props.onAccessToken(event.data.accessToken);
        }, false);
      } else {
        window.location = redirectUri;
      }
    };

    _this.state = {
      isAuthenticatedWithSpotify: false
    };
    return _this;
  }

  var _proto = SpotifyAuth.prototype;

  _proto.componentDidMount = function componentDidMount() {
    var accessToken = getHash().access_token;

    if (accessToken) {
      var _window$opener;

      if (!this.props.noCookie) {
        document.cookie = "spotifyAuthToken=" + accessToken + "; max-age=" + 60 * 60 + ";";
      }

      if (this.props.localStorage) {
        window.localStorage.setItem('spotifyAuthToken', accessToken);
      }

      (_window$opener = window.opener) === null || _window$opener === void 0 ? void 0 : _window$opener.postMessage({
        type: 'react-spotify-auth',
        accessToken: accessToken
      }, '*');
      this.props.onAccessToken(accessToken);
    }
  };

  _proto.render = function render() {
    var _this2 = this;

    return /*#__PURE__*/React.createElement("button", {
      className: this.props.btnClassName || styles.rsaSpotifyBtn,
      onClick: function onClick(event) {
        return _this2.handleClick(event);
      }
    }, !this.props.noLogo && /*#__PURE__*/React.createElement(SpotifyLogo, {
      className: this.props.logoClassName
    }), /*#__PURE__*/React.createElement("span", null, this.props.title));
  };

  return SpotifyAuth;
}(Component);

SpotifyAuth.propTypes = {
  redirectUri: t.string.isRequired,
  clientID: t.string.isRequired,
  scopes: t.arrayOf(t.string),
  onAccessToken: t.func,
  logoClassName: t.string,
  title: t.string,
  noLogo: t.bool,
  noCookie: t.bool,
  showDialog: t.bool,
  localStorage: t.bool
};
SpotifyAuth.defaultProps = {
  redirectUri: 'http://localhost:3000',
  scopes: [scopes.userReadPrivate, scopes.userReadEmail],
  onAccessToken: function onAccessToken(token) {},
  title: 'Continue with Spotify',
  localStorage: false,
  noLogo: false,
  noCookie: false,
  showDialog: false
};

var SpotifyAuthListener = function SpotifyAuthListener(props) {
  useEffect(function () {
    var accessToken = getHash().access_token;

    if (accessToken) {
      if (!props.noCookie) {
        document.cookie = "spotifyAuthToken=" + accessToken + "; max-age=" + 60 * 60 + ";";
      }

      if (props.localStorage) {
        window.localStorage.setItem('spotifyAuthToken', accessToken);
      }

      props.onAccessToken(accessToken);
    }
  }, []);
  return null;
};

SpotifyAuthListener.propTypes = {
  noCookie: t.bool,
  localStorage: t.bool,
  onAccessToken: t.func
};
SpotifyAuthListener.defaultProps = {
  noCookie: false,
  localStorage: false,
  onAccessToken: function onAccessToken(token) {}
};

scopes.all = allScopes;

export { scopes as Scopes, SpotifyAuth, SpotifyAuthListener };
//# sourceMappingURL=index.modern.js.map
